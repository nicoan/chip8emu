debug info on D opcode
======================

(0xD, x, y, n) => {
    let mut i: u8 = 0;
    let v_x: u8 = self.registers[x as usize];
    let v_y: u8 = self.registers[y as usize];
    let screen_vertical_index: u8 = v_x / 8;
    let reminder: u8 = v_x % 8;
    println!("{} {} {} {}", v_x, v_y, screen_vertical_index, reminder);
    for p in 0..n {
        let sprite_part = self.memory[(self.index + i as u16) as usize];
        let sprite_part_b: String = format!("{:b}", sprite_part);
        if reminder != 0 {
            // Draw left part of the sprite
            let sprite_left = sprite_part >> reminder;
            let sprite_left_b: String = format!("{:b}", sprite_left);
            self.screen[(v_y + i) as usize][screen_vertical_index as usize] ^= sprite_left;

            let mut sprite_right_b: String = "".to_string();
            // Prevent screen overflow
            if screen_vertical_index < 7 {
                // Draw right part of the sprite
                let sprite_right = (sprite_part << (8 - reminder));
                sprite_right_b = format!("{:b}", sprite_right);
                self.screen[(v_y + i) as usize][(screen_vertical_index + 1) as usize] ^= sprite_right;
            }
            println!("ORIGINAL: {} - LEFT: {} - RIGHT - {} - INDEX {} (V_x {}) - REMINDER {}", sprite_part_b, sprite_left_b, sprite_right_b, screen_vertical_index, v_x, reminder);
        } else {
            self.screen[(v_y + i) as usize][screen_vertical_index as usize] = sprite_part;
        }
        i += 1;
    }

    self.print_screen();
    Ok(())
},